name: Build

on:
  push:
    branches: [ '*' ]
    tags: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  build:
    name: Build ${{ matrix.nim_host_os }}_${{ matrix.nim_cpu_arch }}
    runs-on: ${{ matrix.builder }}
    # fail-fast: false

    strategy:
      matrix:
        nim_version: [ devel ]
        # Should match nim's system.hostOS values
        nim_host_os: [linux, macosx, windows]
        # Should match nim's system.hostCPU values
        nim_host_cpu: [ amd64 ]
        include:
          - host_os: linux
            builder: ubuntu-latest
          - host_os: macosx
            builder: macos-latest
          - host_os: windows
            builder: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.choosenim
            ~/.nimble
          key: ${{ runner.os }}

      - name: Install & build
        id: build
        env:
          NIM_VERSION: ${{ matrix.nim_version }}
          NIM_CI_VERSION: github-workflows # or vX.Y.Z to lock to a specific nim-ci version
        shell: bash
        run: |
          curl https://raw.githubusercontent.com/elijahr/nim-ci/${NIM_CI_VERSION}/nim-ci.sh -LsSf > nim-ci.sh
          source nim-ci.sh

          # If this nim project is a library, install it.
          # If this nim project exports binaries, build them.
          install_nim_project

          # If this nim project exports binaries, zip them.
          # No-op for NIM_PROJECT_TYPE==library projects.
          make_zipball

          # Run unit tests
          cd "$NIM_PROJECT_DIR"
          nimble test
          cd -

      - name: Upload binary zipball for amd64
        if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v2
        with:
          path: ${{ steps.build.outputs.ZIP_PATH }}

  # Build for Linux aarch64 (arm64), ppc64le, etc
  build-other-archs:
    name: Build ${{ matrix.nim_host_os }}_${{ matrix.nim_cpu_arch }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        nim_version: [ stable ]
        # Should match nim's system.hostOS values
        nim_host_os: [ linux ]
        # Should match nim's system.hostCPU values
        nim_host_cpu: [ arm64, powerpc64el]
        # 1:1 with nim_host_cpu, but different format. List here:
        # https://github.com/uraimo/run-on-arch-action/tree/master/Dockerfiles
        arch: [ aarch64, ppc64le]
        include:
          - nim_host_os: linux
            nim_host_cpu: arm64
            arch: aarch64
          # - nim_host_os: linux
          #   nim_host_cpu: powerpc64el
          #   arch: ppc64le

    steps:
      # Use run-on-arch-action to emulate the CPU architecture.
      # See https://github.com/uraimo/run-on-arch-action for docs.
      - name: Build
        id: build
        uses: uraimo/run-on-arch-action@v1.1.0
        with:
          architecture: ${{ matrix.arch }}
          distribution: buster
          additionalArgs:
            -e NIM_VERSION ${{ matrix.nim_version }}
            -e NIM_CI_VERSION github-workflows # or vX.Y.Z to lock to a specific nim-ci version
          run: |
            # Install system packages
            export DEBIAN_FRONTEND=noninteractive
            apt-get update -q
            apt-get install -q -y build-essential git curl bash

            # Checkout repo
            ref=$(basename $GITHUB_REF)
            git clone -b $ref --single-branch "https://github.com/${GITHUB_REPOSITORY}.git" repo

            cd repo

            curl https://raw.githubusercontent.com/elijahr/nim-ci/${NIM_CI_VERSION}/nim-ci.sh -LsSf > nim-ci.sh
            source nim-ci.sh

            # If this nim project is a library, install it.
            # If this nim project exports binaries, build them.
            install_nim_project

            # If this nim project exports binaries, zip them.
            # No-op for NIM_PROJECT_TYPE==library projects.
            make_zipball

            # Run unit tests
            cd "$NIM_PROJECT_DIR"
            nimble test

      - name: Upload binary zipball
        if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v2
        with:
          path: ${{ steps.build.outputs.ZIP_PATH }}
