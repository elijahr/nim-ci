name: Build

on:
  push:
    branches: [ '*' ]
    tags: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  # Build for amd64
  build:
    name: Build ${{ matrix.os }} amd64
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ ubuntu-latest ]
        nim_version: [ devel ]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.choosenim
            ~/.nimble
          key: ${{ runner.os }}

      - name: Install & build
        shell: bash
        env:
          NIM_VERSION: ${{ matrix.nim_version }}
          CPU_ARCH: amd64
          OS_NAME: ${{ matrix.os }}
        run: |
          source `curl https://raw.githubusercontent.com/elijahr/nim-ci/github-workflows/nim-ci.sh -LsSf`
          install_nim

          # If this nim project is a library, install it.
          # If this nim project exports an executable binary, build it.
          build_nim_project

          # Run unit tests
          cd "$NIM_PROJECT_DIR"
          nimble test

          # If this nim project exports an executable binary, export it.
          # No-op for library projects.
          export_bin_artifacts

      # - name: Upload binaries for ${{ matrix.arch }}
      #   uses: actions/upload-artifact@v2
      #   with:
      #     path: |
      #       bin/*
      #   if: ${{ github.event_name == "tags" }}

  # Build for Linux aarch64 (arm64), ppc64le, etc
  build-linux-other-archs:
    name: Build linux ${{ matrix.arch }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        nim_version: [ devel ]
        arch: [aarch64] #, ppc64le]

    steps:
      # Use the run-on-arch-action action to run a docker emulating the
      # requested CPU architecture.
      # See https://github.com/uraimo/run-on-arch-action for docs.
      - name: Build ${{ matrix.arch }}
        id: build_arch
        uses: uraimo/run-on-arch-action@v1.1.0
        with:
          architecture: ${{ matrix.arch }}
          distribution: buster
          run: |
            # Install system packages
            export DEBIAN_FRONTEND=noninteractive
            apt-get update -q
            apt-get install -q -y build-essential git curl bash

            # Checkout repo
            ref=`basename $GITHUB_REF`
            git clone -b $ref --single-branch "https://github.com/${GITHUB_REPOSITORY}.git"

            # Setup vars for nim-ci.sh
            export \
              NIM_VERSION=${{ matrix.nim_version }} \
              CPU_ARCH=${{ matrix.arch }} \
              OS_NAME=linux \

            source `curl https://raw.githubusercontent.com/elijahr/nim-ci/github-workflows/nim-ci.sh -LsSf`
            install_nim

            # If this nim project is a library, install it.
            # If this nim project exports an executable binary, build it.
            build_nim_project

            # Run unit tests
            cd "$NIM_PROJECT_DIR"
            nimble test

            # If this nim project exports an executable binary, export it.
            # No-op for library projects.
            export_bin_artifacts

      # export_bin_artifacts in the previous step stores the executable's
      # filename in exe_name, and the compressed executable's data in exe_gz.
      # Use those values to reconstruct the executable in the parent container.
      # This is a no-op for library projects.
      - name: Construct executable
        env:
          EXE_NAME: ${{ steps.build_arch.outputs.exe_name }}
          EXE_GZ: ${{ steps.build_arch.outputs.exe_gz }}
        run: |
          if [[ ! -z "$EXE_NAME" ]]
          then
            mkdir -p bin
            echo "$EXE_GZ" > bin/$EXE_NAME
            chmod +x bin/$EXE_NAME
          fi

      # - name: Upload binaries for ${{ matrix.arch }}
      #   uses: actions/upload-artifact@v2
      #   with:
      #     path: |
      #       bin/*
      #   if: ${{ github.event_name == "tags" }}
